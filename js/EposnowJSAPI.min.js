var EposnowAPI = (function () {
    "use strict";
    var prototype = {},
        internal = {},
        $version = "2",
        $accessToken;

    internal.getAccessToken = function () {
        return $accessToken;
    };

    internal.getVersion = function () {
        return $version;
    };

    internal.getParameterByName = function (name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    };

    prototype.getDeviceID = function () {
        return internal.getParameterByName('deviceID');
    };

    prototype.getLocationID = function () {
        return internal.getParameterByName('locationID');
    }

    prototype.getStaffID = function () {
        return internal.getParameterByName('staffID');
    }

    prototype.getUsername = function () {
        return internal.getParameterByName('username');
    }

    prototype.getLocationAreaID = function () {
        return internal.getParameterByName('locationAreaID');
    }

    prototype.getFromDate = function () {
        return internal.getParameterByName('fromDate');
    }

    prototype.getToDate = function () {
        return internal.getParameterByName('toDate');
    }

    prototype.getSearchParameter = function () {
        return internal.getParameterByName('searchParameter');
    }

    prototype.getSource = function () {
        return internal.getParameterByName('source');
    }

    prototype.getCustomerID = function () {
        return internal.getParameterByName('customerId');
    }

    prototype.getTransactionTotalValue = function () {
        return internal.getParameterByName('transactionTotal');
    }

    prototype.getTransactionRemainingBalance = function() {
        return internal.getParameterByName('remainingBalance');
    }

    prototype.getTransactionProducts = function() {
        return internal.getParameterByName('productIds').split(',');
    }

    prototype.getTransactionMiscItems = function () {
        var json = internal.getParameterByName('miscProducts');

        if (json) {
            return JSON.parse(json);
        }

        return [];
    }

    prototype.TillData = function () {
        this.MiscItems = new Array();
        this.Products = new Array();
        this.Tenders = new Array();
        this.TransactionDetails = new Array();
    }

    internal.ApiFunctions = function (controller) {
        var $get = "GET",
            $post = "POST",
            $put = "PUT",
            $delete = "DELETE",
            $controller = controller;

        this.getAllSearch = function (propertyName, value, pageNumber) {
            if (propertyName instanceof Array && value instanceof Array && propertyName.length == value.length) {
                var urlParameters = "?";
                propertyName.forEach(function (property, index) {
                    urlParameters += property + "=" + value[index] + "&";
                });

                urlParameters = urlParameters.substring(0, urlParameters.length - 1);
                return internal.validateRequest($controller, urlParameters, $get, null, pageNumber);
            }
            else {
                return internal.validateRequest($controller, "?" + encodeURIComponent(propertyName) + "=" + encodeURIComponent(value), $get, null, pageNumber);
            }
        };

        this.getAllWhere = function (propertyName, expression, value, pageNumber) {
            return internal.validateRequest($controller, "?search=(" + encodeURIComponent(propertyName + "|" + expression + "|" + value) + ")", $get, null, pageNumber);
        };

        this.getAllOrderBy = function (propertyName, pageNumber) {
            return internal.validateRequest($controller, "?OrderBy=" + encodeURIComponent(propertyName), $get, null, pageNumber);
        };

        this.getAllOrderByDesc = function (propertyName, pageNumber) {
            return internal.validateRequest($controller, "?OrderByDesc=" + encodeURIComponent(propertyName), $get, null, pageNumber);
        };

        this.getAll = function (pageNumber) {
            return internal.validateRequest($controller, null, $get, null, pageNumber);
        };

        this.get = function (id) {
            return internal.validateRequest($controller, "/" + id, $get, null, null);
        };

        this.create = function (object) {
            return internal.validateRequest($controller, null, $post, object, null);
        };

        this.update = function (id, object) {
            return internal.validateRequest($controller, "/" + id, $put, object, null);
        };

        this.delete = function (id) {
            return internal.validateRequest($controller, "/" + id, $delete, null, null);
        };
    };

    internal.uri = "https://api.eposnowhq.com/api/";

    internal.validateRequest = function (controller, route, method, data, pageNumber) {
        var userToken = internal.getAccessToken(),
            version = internal.getVersion(),
            valid = true,
            uri = internal.uri,
            hasRoute = false,
            responseData = null;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            if (version === "1") {
                switch (controller) {
                    case "Transaction":
                    case "TransactionItem":
                    case "BaseItem":
                    case "Tender":
                    case "CompleteTransaction":
                    case "DiscountReason":
                    case "Device":
                        valid = false;
                        console.log("You must use version 2 of the API to access this feature.");
                        break;
                }
            }

            if (valid) {
                uri += (controller === "integration/appsettings") ? controller : "V" + version + "/" + controller;

                if (route) {
                    hasRoute = true;
                    uri += route;
                }

                if (pageNumber) {
                    uri += hasRoute ? "&" : "?";
                    uri += "page=" + pageNumber;
                }

                internal.sendRequest(uri, method, data, userToken).done(function (data) {
                    responseData = data;
                });

                return responseData;
            }
        }
    };

    internal.sendRequest = function (uri, method, data, userToken) {
        var request = {
            url: uri,
            type: method,
            contentType: "application/json",
            accepts: "application/json",
            dataType: 'json',
            crossDomain: true,
            async: false,
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", "Basic " + userToken);
            },
            error: function (jqXHR) {
                console.log("Error code: " + jqXHR.status);
                console.log(jqXHR.responseText);
                throw "Error when sending request to EposNow API, Error Code:" + jqXHR.status + ", Error Message:" + jqXHR.responseText;
            }
        };

        if (method !== "GET") {
            request.data = JSON.stringify(data);
        }

        return $.ajax(request);
    };

    internal.getAsyncRequest = function (uri, method, data, userToken) {
        var request = {
            url: uri,
            type: method,
            contentType: "application/json",
            accepts: "application/json",
            dataType: 'json',
            crossDomain: true,
            async: true,
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", "Basic " + userToken);
            },
            error: function (jqXHR) {
                console.log("Error when sending request to EposNow API, Error Code:" + jqXHR.status + ", Error Message:" + jqXHR.responseText);
            }
        };

        if (method !== "GET") {
            request.data = JSON.stringify(data);
        }

        return $.ajax(request);
    };

    prototype.setAccessToken = function (token) {
        if (token) {
            token = token.replace(/ /g, '');
            if (token.length === 88) {
                $accessToken = token;
            } else {
                console.log("Please check your API access token is correct.");
            }
        } else {
            console.log("Please set your API access token.");
        }
    };

    prototype.setVersion = function (version) {
        if (version) {
            version = version.toString();
            switch (version) {
                case "1":
                case "2":
                    $version = version;
                    break;
                default:
                    console.log("Please select a valid API version number.");
            }
        } else {
            console.log("Please enter a valid API version number.");
        }
    };

    prototype.Category = function (CategoryID, Name, Description, ParentID, ShowOnTill, Wet, ButtonColourID, SortPosition, ReportingCategoryID, NominalCode) {
        this.CategoryID = CategoryID;
        this.Name = Name;
        this.Description = Description;
        this.ParentID = ParentID;
        this.ShowOnTill = ShowOnTill;
        this.Wet = Wet;
        this.ButtonColourID = ButtonColourID;
        this.SortPosition = SortPosition;
        this.ReportingCategoryID = ReportingCategoryID;
        this.NominalCode = NominalCode;
    };
    prototype.Categories = new internal.ApiFunctions("Category");

    prototype.Product = function (ProductID, Name, Description, CostPrice, SalePrice, EatOutPrice, CategoryID, Barcode, TaxRateID, EatOutTaxRateID, BrandID, SupplierID, PopupNoteID, UnitOfSale, VolumeOfSale, MultiChoiceID, ColourID, VariantGroupID, Size, Sku, SellOnWeb, SellOnTill, OrderCode, ButtonColourID, SortPosition, MagentoAttributeSetID, RRPrice, CostPriceTaxRateID, ProductType, TareWeight, ArticleCode) {
        this.ProductID = ProductID;
        this.Name = Name;
        this.Description = Description;
        this.CostPrice = CostPrice;
        this.SalePrice = SalePrice;
        this.EatOutPrice = EatOutPrice;
        this.CategoryID = CategoryID;
        this.Barcode = Barcode;
        this.TaxRateID = TaxRateID;
        this.EatOutTaxRateID = EatOutTaxRateID;
        this.BrandID = BrandID;
        this.SupplierID = SupplierID;
        this.PopupNoteID = PopupNoteID;
        this.UnitOfSale = UnitOfSale;
        this.VolumeOfSale = VolumeOfSale;
        this.MultiChoiceID = MultiChoiceID;
        this.ColourID = ColourID;
        this.VariantGroupID = VariantGroupID;
        this.Size = Size;
        this.Sku = Sku;
        this.SellOnWeb = SellOnWeb;
        this.SellOnTill = SellOnTill;
        this.OrderCode = OrderCode;
        this.ButtonColourID = ButtonColourID;
        this.SortPosition = SortPosition;
        this.MagentoAttributeSetID = MagentoAttributeSetID;
        this.CostPriceTaxRateID = CostPriceTaxRateID;
        this.RRPrice = RRPrice;
        this.ProductType = ProductType;
        this.TareWeight = TareWeight;
        this.ArticleCode = ArticleCode;
    };
    prototype.Products = new internal.ApiFunctions("Product");

    prototype.ProductComposition = function (ProductCompositionID, PurchasedProductID, MasterProductID, Amount) {
        this.ProductCompositionID = ProductCompositionID;
        this.PurchasedProductID = PurchasedProductID;
        this.MasterProductID = MasterProductID;
        this.Amount = Amount;
    };
    prototype.ProductCompositions = new internal.ApiFunctions("ProductComposition");

    prototype.Brand = function (BrandID, Name, Description) {
        this.BrandID = BrandID;
        this.Name = Name;
        this.Description = Description;
    };
    prototype.Brands = new internal.ApiFunctions("Brand");

    prototype.PopupNote = function (PopupNoteID, ShortDesc, Description) {
        this.PopupNoteID = PopupNoteID;
        this.ShortDesc = ShortDesc;
        this.Description = Description;
    };
    prototype.PopupNotes = new internal.ApiFunctions("PopupNote");

    prototype.TaxRate = function (TaxRateID, Percentage, Name, Description, TaxCode) {
        this.TaxRateID = TaxRateID;
        this.Percentage = Percentage;
        this.Name = Name;
        this.Description = Description;
        this.TaxCode = TaxCode;
    };
    prototype.TaxRates = new internal.ApiFunctions("TaxRate");

    prototype.MiscItem = function (Name, Value, TaxRateID, MiscProductID) {
        this.Name = Name;
        this.Value = Value;
        this.Price = Value;
        this.TaxRateID = TaxRateID;
        this.MiscProductID = MiscProductID;
    };
    prototype.MiscItems = new internal.ApiFunctions("MiscProductItem");

    prototype.MultipleChoiceNote = function (MultipleChoiceNoteID, Name, PopupByDefault) {
        this.MultipleChoiceNoteID = MultipleChoiceNoteID;
        this.Name = Name;
        this.PopupByDefault = PopupByDefault;
    };
    prototype.MultipleChoiceNotes = new internal.ApiFunctions("MultipleChoiceNote");

    prototype.MultipleChoiceOption = function (MultipleChoiceOptionID, Message, NoteID) {
        this.MultipleChoiceOptionID = MultipleChoiceOptionID;
        this.Message = Message;
        this.NoteID = NoteID;
    };
    prototype.MultipleChoiceOptions = new internal.ApiFunctions("MultipleChoiceOption");

    prototype.MultipleChoiceProduct = function (MultipleChoiceProductID, ProductID, MultipleChoiceProductGroupID, SalePrice, EatOutPrice) {
        this.MultipleChoiceProductID = MultipleChoiceProductID;
        this.ProductID = ProductID;
        this.MultipleChoiceProductGroupID = MultipleChoiceProductGroupID;
        this.SalePrice = SalePrice;
        this.EatOutPrice = EatOutPrice;
    };
    prototype.MultipleChoiceProducts = new internal.ApiFunctions("MultipleChoiceProduct");

    prototype.MultipleChoiceProductGroup = function (MultipleChoiceProductGroupID, Name, Description) {
        this.MultipleChoiceProductGroupID = MultipleChoiceProductGroupID;
        this.Name = Name;
        this.Description = Description;
    };
    prototype.MultipleChoiceProductGroups = new internal.ApiFunctions("MultipleChoiceProductGroup");

    prototype.MultipleChoiceProductGroupItem = function (MultipleChoiceProductGroupItemID, ProductID, MultipleChoiceProductGroupID, TillOrder) {
        this.MultipleChoiceProductGroupItemID = MultipleChoiceProductGroupItemID;
        this.ProductID = ProductID;
        this.MultipleChoiceProductGroupID = MultipleChoiceProductGroupID;
        this.TillOrder = TillOrder;
    };
    prototype.MultipleChoiceProductGroupItems = new internal.ApiFunctions("MultipleChoiceProductGroupItem");

    prototype.Customer = function (CustomerID, Title, Forename, Surname, BusinessName, DateOfBirth, ContactNumber, ContactNumber2, EmailAddress, Type, MaxCredit, CurrentBalance, ExpiryDate, CardNumber, CurrentPoints, SignUpDate, Notes) {
        this.CustomerID = CustomerID;
        this.Title = Title;
        this.Forename = Forename;
        this.Surname = Surname;
        this.BusinessName = BusinessName;
        this.DateOfBirth = DateOfBirth;
        this.ContactNumber = ContactNumber;
        this.ContactNumber2 = ContactNumber2;
        this.EmailAddress = EmailAddress;
        this.Type = Type;
        this.MaxCredit = MaxCredit;
        this.CurrentBalance = CurrentBalance;
        this.ExpiryDate = ExpiryDate;
        this.CardNumber = CardNumber;
        this.CurrentPoints = CurrentPoints;
        this.SignUpDate = SignUpDate;
        this.Notes = Notes;
    };
    prototype.Customers = new internal.ApiFunctions("Customer");

    prototype.CustomerAddress = function (CustomerAddressID, CustomerID, IsMainAddress, Name, AddressLine1, AddressLine2, Town, County, PostCode) {
        this.CustomerAddressID = CustomerAddressID;
        this.CustomerID = CustomerID;
        this.IsMainAddress = IsMainAddress;
        this.Name = Name;
        this.AddressLine1 = AddressLine1;
        this.AddressLine2 = AddressLine2;
        this.Town = Town;
        this.County = County;
        this.PostCode = PostCode;
    };
    prototype.CustomerAddresses = new internal.ApiFunctions("CustomerAddress");

    prototype.CustomerType = function (CustomerTypeID, Name, Discount, Description, DefaultExpiryLength, DefaultMaxCredit) {
        this.CustomerTypeID = CustomerTypeID;
        this.Name = Name;
        this.Discount = Discount;
        this.Description = Description;
        this.DefaultExpiryLength = DefaultExpiryLength;
        this.DefaultMaxCredit = DefaultMaxCredit;
    };
    prototype.CustomerTypes = new internal.ApiFunctions("CustomerType");

    prototype.CustomerRating = function (CustomerRatingID, CustomerID, TransactionID, DateTime, Ratings, Comment, Source) {
        this.CustomerRatingID = CustomerRatingID;
        this.CustomerID = CustomerID;
        this.TransactionID = TransactionID;
        this.DateTime = DateTime;
        this.Ratings = Ratings;
        this.Comment = Comment;
        this.Source = Source;
    };
    prototype.CustomerRatings = new internal.ApiFunctions("CustomerRating");

    prototype.CustomerCredit = function (CustomerID, CreditToAdd, StaffID, TenderTypeID) {
        this.CustomerID = CustomerID;
        this.CreditToAdd = CreditToAdd;
        this.StaffID = StaffID;
        this.TenderTypeID = TenderTypeID;
    };
    prototype.CustomerCredits = new internal.ApiFunctions("CustomerCredit");

    prototype.CustomerPoint = function (CustomerID, PointsToAdd, StaffID) {
        this.CustomerID = CustomerID;
        this.PointsToAdd = PointsToAdd;
        this.StaffID = StaffID;
    };
    prototype.CustomerPoints = new internal.ApiFunctions("CustomerPoints");

    prototype.Booking = function (BookingID, BookingItemID, BookingStatusID, CreatedDateTime, StaffID, CustomerID, Duration, Notes, StartDateTime, CreatedStaffID, UpdatedDateTime, UpdatedStaffID) {
        this.BookingID = BookingID;
        this.BookingItemID = BookingItemID;
        this.CustomerID = CustomerID;
        this.BookingStatusID = BookingStatusID;
        this.StaffID = StaffID;
        this.StartDateTime = StartDateTime;
        this.Duration = Duration;
        this.Notes = Notes;
        this.CreatedStaffID = CreatedStaffID;
        this.CreatedDateTime = CreatedDateTime;
        this.UpdatedStaffID = UpdatedStaffID;
        this.UpdatedDateTime = UpdatedDateTime;
    };
    prototype.Bookings = new internal.ApiFunctions("Booking");

    prototype.BookingCustomer = function (BookingCustomerID, BookingID, CustomerID, GroupSize, Notes) {
        this.BookingCustomerID = BookingCustomerID;
        this.BookingID = BookingID;
        this.CustomerID = CustomerID;
        this.GroupSize = GroupSize;
        this.Notes = Notes;
    };
    prototype.BookingCustomers = new internal.ApiFunctions("BookingCustomer");

    prototype.BookingItem = function (BookingItemID, BookingItemTypeID, Description, LocationID, MaxOccupancy, Name, Notes) {
        this.BookingItemID = BookingItemID;
        this.BookingItemTypeID = BookingItemTypeID;
        this.Description = Description;
        this.LocationID = LocationID;
        this.MaxOccupancy = MaxOccupancy;
        this.Name = Name;
        this.Notes = Notes;
    };
    prototype.BookingItems = new internal.ApiFunctions("BookingItem");

    prototype.ProductStock = function (StockID, LocationID, ProductID, CurrentStock, MinStock, MaxStock, CurrentVolume, OnOrder, Alerts) {
        this.StockID = StockID;
        this.LocationID = LocationID;
        this.ProductID = ProductID;
        this.CurrentStock = CurrentStock;
        this.MinStock = MinStock;
        this.MaxStock = MaxStock;
        this.CurrentVolume = CurrentVolume;
        this.Alerts = Alerts;
        this.OnOrder = OnOrder;
    };
    prototype.ProductStocks = new internal.ApiFunctions("ProductStock");

    prototype.StockTransfer = function (StockTransferID, TransNo, FromLocation, ToLocation, StaffSent, StaffReceived, DateSent, DateReceived, Status, ReasonID, Note) {
        this.StockTransferID = StockTransferID;
        this.TransNo = TransNo;
        this.FromLocation = FromLocation;
        this.ToLocation = ToLocation;
        this.StaffSent = StaffSent;
        this.StaffReceived = StaffReceived;
        this.ReasonID = ReasonID;
        this.Note = Note;
        this.DateSent = DateSent;
        this.DateReceived = DateReceived;
        this.Status = Status;
    };
    prototype.StockTransfers = new internal.ApiFunctions("StockTransfer");

    prototype.StockTransferItem = function (StockTransferItemID, StockTransferID, ProductID, QtySent, QtyReceived, ItemReasonID, QtyNewFrom, QtyNewTo) {
        this.StockTransferItemID = StockTransferItemID;
        this.StockTransferID = StockTransferID;
        this.ProductID = ProductID;
        this.QtySent = QtySent;
        this.QtyReceived = QtyReceived;
        this.ItemReasonID = ItemReasonID;
        this.QtyNewFrom = QtyNewFrom;
        this.QtyNewTo = QtyNewTo;
    };
    prototype.StockTransferItems = new internal.ApiFunctions("StockTransferItem");

    prototype.StockTransferReason = function (StockTransferReasonID, Description) {
        this.StockTransferReasonID = StockTransferReasonID;
        this.Description = Description;
    };
    prototype.StockTransferReasons = new internal.ApiFunctions("StockTransferReason");

    prototype.PurchaseOrder = function (PurchaseOrderID, OrderRef, DateOrdered, Note, SupplierID, LocationID, Status, DateCompleted, ExpectedDeliveryDate) {
        this.PurchaseOrderID = PurchaseOrderID;
        this.OrderRef = OrderRef;
        this.DateOrdered = DateOrdered;
        this.Note = Note;
        this.SupplierID = SupplierID;
        this.LocationID = LocationID;
        this.Status = Status;
        this.ExpectedDeliveryDate = ExpectedDeliveryDate;
        this.DateCompleted = DateCompleted;
    };
    prototype.PurchaseOrders = new internal.ApiFunctions("PurchaseOrder");

    prototype.PurchaseOrderItem = function (PurchaseOrderItemID, PurchaseOrderID, ProductID, QtyOrdered, QtyReceived, CostPrice) {
        this.PurchaseOrderItemID = PurchaseOrderItemID;
        this.PurchaseOrderID = PurchaseOrderID;
        this.ProductID = ProductID;
        this.QtyOrdered = QtyOrdered;
        this.QtyReceived = QtyReceived;
        this.CostPrice = CostPrice;
    };
    prototype.PurchaseOrderItems = new internal.ApiFunctions("PurchaseOrderItem");

    prototype.Supplier = function (SupplierID, SupplierName, SupplierDescription, SupplierType, AddressLine1, AddressLine2, Town, County, PostCode, ContactNumber, ContactNumber2, EmailAddress) {
        this.SupplierID = SupplierID;
        this.SupplierName = SupplierName;
        this.SupplierDescription = SupplierDescription;
        this.SupplierType = SupplierType;
        this.AddressLine1 = AddressLine1;
        this.AddressLine2 = AddressLine2;
        this.Town = Town;
        this.County = County;
        this.PostCode = PostCode;
        this.ContactNumber = ContactNumber;
        this.ContactNumber2 = ContactNumber2;
        this.EmailAddress = EmailAddress;
    };
    prototype.Suppliers = new internal.ApiFunctions("Supplier");

    prototype.Location = function (LocationID, Name, Description, Address1, Address2, Town, County, PostCode, EmailAddress, LocationAreaID) {
        this.LocationID = LocationID;

        if (LocationAreaID) {
            this.LocationAreaID = LocationAreaID;
        }

        this.Name = Name;
        this.Description = Description;
        this.Address1 = Address1;
        this.Address2 = Address2;
        this.Town = Town;
        this.County = County;
        this.PostCode = PostCode;
        this.EmailAddress = EmailAddress;
    };
    prototype.Locations = new internal.ApiFunctions("Location");

    prototype.Transaction = function (TransactionID, CustomerID, StaffID, TableID, DeviceID, DateTime, PaymentStatus, DiscountValue, Total, ChargeTendered, Barcode, EatOut, NonDiscountable, NonVAT) {
        this.TransactionID = TransactionID;
        this.CustomerID = CustomerID;
        this.StaffID = StaffID;
        this.TableID = TableID;
        this.DateTime = DateTime;
        this.EatOut = EatOut;
        this.DeviceID = DeviceID;
        this.PaymentStatus = PaymentStatus;
        this.DiscountValue = DiscountValue;
        this.Total = Total;
        this.ChargeTendered = ChargeTendered;
        this.Barcode = Barcode;
        this.NonDiscountable = NonDiscountable;
        this.NonVAT = NonVAT;
    };
    prototype.Transactions = new internal.ApiFunctions("Transaction");

    prototype.TransactionItem = function (TransactionItemID, TransactionID, ProductID, Price, Discount, Quantity, Notes, ClientID, VATAmount, ParentTransactionItemID, MultipleChoiceProductID) {
        this.TransactionItemID = TransactionItemID;
        this.TransactionID = TransactionID;
        this.ProductID = ProductID;
        this.Price = Price;
        this.Discount = Discount;
        this.Quantity = Quantity;
        this.Notes = Notes;
        this.ClientID = ClientID;
        this.VATAmount = VATAmount;
        this.ParentTransactionItemID = ParentTransactionItemID;
        this.MultipleChoiceProductID = MultipleChoiceProductID;
    };
    prototype.TransactionItems = new internal.ApiFunctions("TransactionItem");

    prototype.TransactionDetail = function (Name, Details) {
        this.Name = Name;
        this.Details = Details;
    };
    prototype.TransactionDetails = new internal.ApiFunctions("TransactionDetails");

    prototype.Tender = function (TransactionID, TypeID, Amount, Change, TenderID, ClientID) {
        this.TenderID = TenderID;
        this.TransactionID = TransactionID;
        this.TypeID = TypeID;
        this.Amount = Amount;
        this.Change = Change;
        this.ClientID = ClientID;
    };
    prototype.Tenders = new internal.ApiFunctions("Tender");

    prototype.TenderType = function (TypeID, Name, Description) {
        this.TypeID = TypeID;
        this.Name = Name;
        this.Description = Description;
    };
    prototype.TenderTypes = new internal.ApiFunctions("TenderType");

    prototype.BaseItem = function (BaseItemID, TransactionID, ItemTypeID, Amount) {
        this.BaseItemID = BaseItemID;
        this.TransactionID = TransactionID;
        this.ItemTypeID = ItemTypeID;
        this.Amount = Amount;
    };
    prototype.BaseItems = new internal.ApiFunctions("BaseItem");

    prototype.PreparationStatus = function (PreparationStatusID, TransactionID, Barcode, State, CreatedTime, StaffID, DeviceID) {
        this.PreparationStatusID = PreparationStatusID;
        this.TransactionID = TransactionID;
        this.State = State;
        this.StaffID = StaffID;
        this.Barcode = Barcode;
        this.CreatedTime = CreatedTime;
        this.DeviceID = DeviceID;
    };
    prototype.PreparationStatuses = new internal.ApiFunctions("PreparationStatus");

    prototype.DiscountReason = function (DiscountReasonID, Reason, DefaultVal) {
        this.DiscountReasonID = DiscountReasonID;
        this.Reason = Reason;
        this.DefaultVal = DefaultVal;
    };
    prototype.DiscountReasons = new internal.ApiFunctions("DiscountReason");

    prototype.CompleteTransaction = function (DateTime, EatOut, PaymentStatus, StaffID, CustomerID) {
        this.DateTime = DateTime;
        this.EatOut = EatOut;
        this.PaymentStatus = PaymentStatus;
        this.StaffID = StaffID;
        this.CustomerID = CustomerID;
        this.TransactionItems = [];
        this.Tenders = [];
        this.BaseItems = [];

    };
    prototype.CompleteTransactionItem = function (ProductID, Price, Discount, Notes, Quantity) {
        this.ProductID = ProductID;
        this.Price = Price;
        this.Discount = Discount;
        this.Notes = Notes;
        this.Quantity = Quantity;
        this.MultipleChoiceItems = [];
    };
    prototype.CompleteMultipleChoiceItem = function (ProductID, Price, Notes, Quantity, MultipleChoiceProductID) {
        this.ProductID = ProductID;
        this.Price = Price;
        this.Notes = Notes;
        this.Quantity = Quantity;
        this.MultipleChoiceProductID = MultipleChoiceProductID;
    };
    prototype.CompleteTransactions = new internal.ApiFunctions("CompleteTransaction");

    prototype.SeatingArea = function (SeatingAreaID, Name, Description, LocationID) {
        this.SeatingAreaID = SeatingAreaID;
        this.Name = Name;
        this.Description = Description;
        this.LocationID = LocationID;
    };
    prototype.SeatingAreas = new internal.ApiFunctions("SeatingArea");

    prototype.SeatingTable = function (TableID, Name, Seats, SeatingAreaID, PosX, PosY) {
        this.TableID = TableID;
        this.Name = Name;
        this.Seats = Seats;
        this.SeatingAreaID = SeatingAreaID;
        this.PosX = PosX;
        this.PosY = PosY;
    };
    prototype.SeatingTables = new internal.ApiFunctions("SeatingTable");

    prototype.Staff = function (StaffID, Name, Password, SwipeLogin, AccessRightID, HourlyRate) {
        this.StaffID = StaffID;
        this.Name = Name;
        this.Password = Password;
        this.SwipeLogin = SwipeLogin;
        this.AccessRightID = AccessRightID;
        this.HourlyRate = HourlyRate;
    };
    prototype.Staffs = new internal.ApiFunctions("Staff");

    prototype.AccessRight = function (AccessRightID, Name, Description, Till, TillAdmin, BackOffice, Reports, Refunds, TablePlanning, BasketDiscount, ItemDiscount, StockSend, StockReceive, StockTake, Payouts, DisableServiceCharge, NoSale, PettyCash, FloatAdjust, AdminOptions, CloseTill, VoidLine, Clear, Hold, CustomerSelect, BlindEod, SetMaxCreditLimit, ItemDiscountLimit, ItemDiscountLimitPerc, BasketDiscountLimit, BasketDiscountLimitPerc, RefundLimit) {
        this.AccessRightID = AccessRightID;
        this.Name = Name;
        this.Description = Description;
        this.Till = Till;
        this.TillAdmin = TillAdmin;
        this.BackOffice = BackOffice;
        this.Reports = Reports;
        this.Refunds = Refunds;
        this.TablePlanning = TablePlanning;
        this.BasketDiscount = BasketDiscount;
        this.ItemDiscount = ItemDiscount;
        this.StockSend = StockSend;
        this.StockReceive = StockReceive;
        this.StockTake = StockTake;
        this.Payouts = Payouts;
        this.DisableServiceCharge = DisableServiceCharge;
        this.NoSale = NoSale;
        this.PettyCash = PettyCash;
        this.FloatAdjust = FloatAdjust;
        this.AdminOptions = AdminOptions;
        this.CloseTill = CloseTill;
        this.VoidLine = VoidLine;
        this.Clear = Clear;
        this.Hold = Hold;
        this.CustomerSelect = CustomerSelect;
        this.BlindEod = BlindEod;
        this.SetMaxCreditLimit = SetMaxCreditLimit;
        this.ItemDiscountLimit = ItemDiscountLimit;
        this.ItemDiscountLimitPerc = ItemDiscountLimitPerc;
        this.BasketDiscountLimit = BasketDiscountLimit;
        this.BasketDiscountLimitPerc = BasketDiscountLimitPerc;
        this.RefundLimit = RefundLimit;
    };
    prototype.AccessRights = new internal.ApiFunctions("AccessRight");

    prototype.Clocking = function (ClockingID, StaffID, InTime, OutTime, HoursWorked, Notes, ClockingTypeID) {
        this.ClockingID = ClockingID;
        this.StaffID = StaffID;
        this.InTime = InTime;
        this.OutTime = OutTime;
        this.HoursWorked = HoursWorked;
        this.Notes = Notes;
        this.ClockingTypeID = ClockingTypeID;
    };
    prototype.Clockings = new internal.ApiFunctions("Clocking");

    prototype.LocationArea = function (LocationAreaID, Name, Description, EmailAddress) {
        this.LocationAreaID = LocationAreaID;
        this.Name = Name;
        this.Description = Description;
        this.EmailAddress = EmailAddress;
    }
    prototype.LocationAreas = new internal.ApiFunctions("LocationArea");

    prototype.ClockingType = function (ClockingTypeID, Name, PayrateMultiplier) {
        this.ClockingTypeID = ClockingTypeID;
        this.Name = Name;
        this.PayrateMultiplier = PayrateMultiplier;
    };
    prototype.ClockingTypes = new internal.ApiFunctions("ClockingType");

    prototype.Device = function (DeviceID, Name, Description, LocationID, Enabled) {
        this.DeviceID = DeviceID;
        this.Name = Name;
        this.Description = Description;
        this.LocationID = LocationID;
        this.Enabled = Enabled;
    };
    prototype.Devices = new internal.ApiFunctions("Device");

    prototype.EndOfDay = function (FromDate, ToDate, LocationAreaID, LocationID, DeviceID, DeviceGroupID, StaffID) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "reports/EndOfDay";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += DeviceID == null ? "" : ("&DeviceID=" + DeviceID);
            uri += DeviceGroupID == null ? "" : ("&DeviceGroupID=" + DeviceGroupID);
            uri += StaffID == null ? "" : ("&StaffID=" + StaffID);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.BookkeepingReport = function (FromDate, ToDate, LocationAreaID, LocationID, DeviceID, DeviceGroupID, StaffID) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "reports/BookkeepingReport";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += DeviceID == null ? "" : ("&DeviceID=" + DeviceID);
            uri += DeviceGroupID == null ? "" : ("&DeviceGroupID=" + DeviceGroupID);
            uri += StaffID == null ? "" : ("&StaffID=" + StaffID);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.DailySales = function (FromDate, ToDate, LocationAreaID, LocationID, DeviceID, StaffID, ProductID, Search, DeviceGroupID) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "V2/DailySales";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += DeviceID == null ? "" : ("&DeviceID=" + DeviceID);
            uri += DeviceGroupID == null ? "" : ("&DeviceGroupID=" + DeviceGroupID);
            uri += StaffID == null ? "" : ("&StaffID=" + StaffID);
            uri += ProductID == null ? "" : ("&ProductID=" + ProductID);
            uri += Search == null ? "" : ("&Search=" + Search);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.SalesByEmployee = function (FromDate, ToDate, LocationAreaID, LocationID, DeviceID, DeviceGroupID, StaffID) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "reports/SalesByEmployee";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += DeviceID == null ? "" : ("&DeviceID=" + DeviceID);
            uri += DeviceGroupID == null ? "" : ("&DeviceGroupID=" + DeviceGroupID);
            uri += StaffID == null ? "" : ("&StaffID=" + StaffID);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.StaffPayrollReport = function (FromDate, ToDate, LocationAreaID, LocationID, ClockingType) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "reports/StaffPayrollReport";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += ClockingType == null ? "" : ("&DeviceID=" + ClockingType);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.PromotionReport = function (FromDate, ToDate, LocationAreaID, LocationID, DeviceID, DeviceGroupID) {
        var userToken = internal.getAccessToken(),
            uri = internal.uri;

        if (!userToken) {
            prototype.setAccessToken(internal.getParameterByName("appToken"));
            userToken = internal.getAccessToken();
        }

        if (userToken) {
            uri += "reports/PromotionReport";

            uri += "?FromDate=" + FromDate + "&ToDate=" + ToDate;

            uri += LocationAreaID == null ? "" : ("&LocationAreaID=" + LocationAreaID);
            uri += LocationID == null ? "" : ("&LocationID=" + LocationID);
            uri += DeviceID == null ? "" : ("&DeviceID=" + DeviceID);
            uri += DeviceGroupID == null ? "" : ("&DeviceGroupID=" + DeviceGroupID);

            return internal.getAsyncRequest(uri, "GET", null, userToken);
        }
    };

    prototype.AppSetting = function (AppSettings) {
        if (AppSettings) {
            if (typeof AppSettings === "string") {
                try {
                    return JSON.parse(AppSettings);
                } catch (e) {
                    console.log("The entered JSON is invalid.");
                }
            } else {
                return AppSettings;
            }
        }
    };

    prototype.AppSettings = (function () {
        var functions = {},
            $controller = "integration/appsettings",
            $get = "GET",
            $post = "POST";

        functions.load = function () {
            var settings = internal.validateRequest($controller, null, $get, null, null);
            if (settings) {
                try {
                    settings = JSON.parse(settings);
                } catch (e) {
                    console.log("Your app settings do not appear to be valid JSON.");
                }
            }
            return settings;
        };

        functions.save = function (AppSettings) {
            if (AppSettings) {
                if (typeof AppSettings === "string") {
                    try {
                        JSON.parse(AppSettings);
                    } catch (e) {
                        console.log("The entered JSON is invalid. Settings not saved.");
                        return;
                    }
                }
                return internal.validateRequest($controller, null, $post, AppSettings, null);
            } else {
                console.log("Please supply your AppSettings as a JSON string, or an object.");
            }
        };
        return functions;
    }());

    return prototype;
}());